image:
  repository: ghcr.io/justarchinet/archisteamfarm
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

envFrom: []
env:
- name: ASF_ARGS
  value: "--no-config-migrate"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Name of secrets and configmaps to mount inside /app/config
# Not used if sidecars.configAutoReload is enabled
config:
  # Inline configuration for ASF.
  # If sidecars.configAutoReload is not enabled, will be mounted as read-only secret directly inside ASF container.
  # Otherwise, will be captured by configAutoReload sidecar and used to trigger ASF Auto-Reload feature
  # YAML here, will be converted to JSON automatically
  asfConfigs:
    # IPC.config: |
    #   {
    #     "Kestrel": {
    #       "Endpoints": {
    #         "HTTP": {
    #           "Url": "http://*:1242"
    #         }
    #       },
    #       "KnownNetworks": [
    #         "10.0.0.0/8",
    #         "172.16.0.0/12",
    #         "192.168.0.0/16"
    #       ],
    #       "PathBase": "/"
    #     }
    #   }
  secrets: []
  configmaps: []

sidecars:
  configAutoReload:
    # If enabled: true, will utilize ASF Auto-Reload feature by updating configs directory with watched scripts
    # If enabled: false, configs from 'config' and 'asfConfigs' sections will be mounted to /app/config
    enabled: true
    image: kiwigrid/k8s-sidecar:1.19.5
    imagePullPolicy: IfNotPresent
    # If configAutoReload.enabled, ASF.json will be populated after ASF starts and therefore, ASF will not pick up main config
    # If this value is set, simple init-continer will run before ASF starts to copy ASF.json value to /app/config
    ASFJsonSecretRef: asf-json
    resources: {}
      #   limits:
      #     cpu: 100m
      #     memory: 100Mi
      #   requests:
      #     cpu: 50m
      #     memory: 50Mi
    env: []
    # - name: REQ_TIMEOUT
    #   value: "30"
    # If specified, the sidecar will search for config-maps and secrets inside this namespace.
    # Otherwise the namespace in which the sidecar is running will be used.
    # It's also possible to specify ALL to search in all namespaces:
    # searchNamespace:
    containerSecurityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
    envFrom: []

  # Allows you to inject additional/other sidecars
  other: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Needed to watch secrets and configmaps from configAutoReload sidecar
  # RBAC will be used regardless of this setting, if configAutoReload.enabled is true
  rbac: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  enabled: true
  type: ClusterIP
  port: 80

ingress:
  # enabled: false
  # className: ""
  # annotations: {}
  #   # kubernetes.io/ingress.class: nginx
  #   # kubernetes.io/tls-acme: "true"
  # hosts:
  # - host: chart-example.local
  #   paths:
  #   - path: /
  #     pathType: ImplementationSpecific
  # tls: []
  # - secretName: chart-example-tls
  #   hosts:
  #   - chart-example.local
  enabled: true
  className: nginx
  hosts:
  - host: asf.tenma.moe
    paths:
    - path: /
      pathType: Prefix

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 100Mi
  # requests:
  #   cpu: 50m
  #   memory: 50Mi

nodeSelector: {}

tolerations: []

affinity: {}
